name: "Databricks CI/CD"
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      skip-linting:
        required: false
        type: boolean
        default: false
        description: "Skip linting checks"
    secrets:
      client-id:
        required: true
      tenant-id:
        required: true
      subscription-id:
        required: true

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required to checkout code

jobs:
  lint:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip-linting }}
    steps:
      - name: Checkout Working Repo
        uses: actions/checkout@v4
        with:
          path: working-repo
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nbqa==1.7.1 black==23.3.0 flake8==6.0.0
          
      - name: Run Black formatting check on notebooks
        id: black-check
        working-directory: ./working-repo
        run: |
          echo "Running Black formatting check..."
          nbqa black src/ \
            --line-length=120 \
            --target-version=py310 \
            --check \
            --diff
        continue-on-error: true
        
      - name: Run Flake8 linting on notebooks
        id: flake8-check
        working-directory: ./working-repo
        run: |
          echo "Running Flake8 linting..."
          nbqa flake8 src/ \
            --max-line-length=120 \
            --ignore=F403,F405,E203,W503 \
            --extend-ignore=E501,F821,E231,E241,E202,E402
        continue-on-error: true
        
      - name: Check linting results
        if: ${{ steps.black-check.outcome == 'failure' || steps.flake8-check.outcome == 'failure' }}
        run: |
          echo "❌ Linting checks failed!"
          if [ "${{ steps.black-check.outcome }}" == "failure" ]; then
            echo "  - Black formatting issues detected"
          fi
          if [ "${{ steps.flake8-check.outcome }}" == "failure" ]; then
            echo "  - Flake8 linting issues detected"
          fi
          exit 1
          
      - name: Linting passed
        if: steps.black-check.outcome == 'success' && steps.flake8-check.outcome == 'success'
        run: echo "✅ All linting checks passed!"

  validate:
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ always() && (needs.lint.result == 'success' || needs.lint.result == 'skipped') }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout Working Repo
        uses: actions/checkout@v4
        with:
          path: working-repo
          
      - name: Checkout Template Repo (for actions)
        uses: actions/checkout@v4
        with:
          repository: Himaan1502/ADB-Template
          path: template-repo
          ref: main
          
      - name: Azure OIDC Login
        uses: ./template-repo/actions/login
        with:
          environment: ${{ inputs.environment }}
          client-id: ${{ secrets.client-id }}
          tenant-id: ${{ secrets.tenant-id }}
          subscription-id: ${{ secrets.subscription-id }}
          
      - name: Validate Bundle
        uses: ./template-repo/actions/validate
        with:
          target: ${{ inputs.environment }}
        env:
          WORKING_REPO_PATH: ./working-repo

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, validate]
    if: ${{ always() && needs.validate.result == 'success' && (needs.lint.result == 'success' || needs.lint.result == 'skipped') }}
    environment: ${{ inputs.environment }}  # GitHub Environment for protection rules
    steps:
      - name: Checkout Working Repo
        uses: actions/checkout@v4
        with:
          path: working-repo
          
      - name: Checkout Template Repo (for actions)
        uses: actions/checkout@v4
        with:
          repository: Himaan1502/ADB-Template
          path: template-repo
          ref: main
          
      - name: Azure OIDC Login
        uses: ./template-repo/actions/login
        with:
          environment: ${{ inputs.environment }}
          client-id: ${{ secrets.client-id }}
          tenant-id: ${{ secrets.tenant-id }}
          subscription-id: ${{ secrets.subscription-id }}
          
      - name: Deploy Bundle
        uses: ./template-repo/actions/deploy
        with:
          target: ${{ inputs.environment }}
        env:
          WORKING_REPO_PATH: ./working-repo
